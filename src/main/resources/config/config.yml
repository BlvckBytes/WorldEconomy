#___       __            _______________________
#  __ |     / /_______________  /_____  /__  ____/_______________________________ ________  __
#  __ | /| / /_  __ \_  ___/_  /_  __  /__  __/  _  ___/  __ \_  __ \  __ \_  __ `__ \_  / / /
#  __ |/ |/ / / /_/ /  /   _  / / /_/ / _  /___  / /__ / /_/ /  / / / /_/ /  / / / / /  /_/ /
#  ____/|__/  \____//_/    /_/  \__,_/  /_____/  \___/ \____//_/ /_/\____//_/ /_/ /_/_\__, /
#                                                                                   /____/
#
# WorldEconomy - Developed by BlvckBytes <blvckbytes@gmail.com>
# Repository - https://github.com/BlvckBytes/WorldEconomy
# ASCII-Art - https://patorjk.com/software/taag/#p=display&f=Speed
#
# PRE-PROCESSOR-INPUT en_us.txt

commands:
  balance:
    name: balance
    aliases:
      - bal
  balanceGroup:
    name: balancegroup
    aliases:
      - balgroup
      - balg
  money:
    name: money
  pay:
    name: pay
  payGroup:
    name: paygroup
    aliases:
      - payg
  balanceTop:
    name: balancetop
    aliases:
      - baltop
  reload:
    name: worldeconomyreload
    aliases:
      - wereload
  balances:
    name: balances
    aliases:
      - bals

worldGroups:
  # Used to internally identify balances, as well as for tab-completion
  # Do not alter once initially established!
  World:
    # Rendered in chat, whenever this world-group is referred to
    displayName: '&6World'
    # List of world-names which are combined into a single economy-account per player
    members:
      - world
      - world_nether
      - world_the_end

economy:
  # Whether to log all calls made to the economy-provider for debugging-purposes
  # This property does not support live-reloading, as many plugins do not handle provider re-registers correctly
  logProviderCalls: false
  # Duration in-between writing accounts from memory to their corresponding files
  # Too little gaps will cause needless lag, too large may result in data-loss on unexpected shutdowns
  cacheWritePeriodSeconds: 30
  # How many entries to show at most when viewing top-lists
  topListSize: 5
  nameSingular: 'Euro'
  namePlural: 'Euros'
  # Balance set to an account whenever it's first created
  startingBalance: 200.0
  # Set to null for no upper bound
  maxMoney: null
  # Set to null for no lower bound
  minMoney: -1000.0
  # Whether to clamp existing accounts to the [min;max]-interval as specified above when loading them
  doClampOnLoad: true
  # Set to null for no constraint
  # Values transferred using /pay or /money need to be a multiple of this value
  transactionStepSize: .01

  # Set to null to not render
  currencyFormatPrefix: 'â‚¬ '
  # Set to null to not render
  currencyFormatSuffix: null
  currencyFormat:
    # https://en.wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags
    subtagName: 'en'
    # https://docs.oracle.com/javase/8/docs/api/index.html?java/math/RoundingMode.html
    roundingMode: FLOOR
    useGrouping: true
    minimumFractionDigits: 2
    maximumFractionDigits: 2

playerMessages:
  couldNotLoadAccountSelf$: '@{MESSAGE-COULD-NOT-LOAD-ACCOUNT-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # name: String
  couldNotLoadAccountOther$: '@{MESSAGE-COULD-NOT-LOAD-ACCOUNT-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  # current_world: String
  notInAnyWorldGroupSelf$: '@{MESSAGE-NOT-IN-ANY-WORLD-GROUP-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # name: String
  # current_world: String
  notInAnyWorldGroupOther$: '@{MESSAGE-NOT-IN-ANY-WORLD-GROUP-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  # name: String
  unknownWorldGroup$: '@{MESSAGE-UNKNOWN-WORLD-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalancesCommandSelf$: '@{MESSAGE-MISSING-PERMISSION-BALANCES-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalancesCommandOther$: '@{MESSAGE-MISSING-PERMISSION-BALANCES-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  playerOnlyBalancesCommandSelf$: '@{MESSAGE-PLAYER-ONLY-BALANCES-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  usageBalancesCommandSelf$: '@{MESSAGE-USAGE-BALANCES-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  usageBalancesCommandOther$: '@{MESSAGE-USAGE-BALANCES-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  # - holder: String
  # - balances: Map<String, String>
  # The key of balances represents the display-name of the world-group, the value its corresponding formatted balance
  balancesScreen$: |
    flatten(
      "&8&m                                                  ",
      @{MESSAGE-BALANCES-SCREEN-HEADLINE(prefix=lut["MESSAGE_PREFIX"])},
      map(balances, (balance_entry) => (
        @{MESSAGE-BALANCES-SCREEN-WORLD-GROUP-LINE(prefix=lut["MESSAGE_PREFIX"]; world_group=key(balance_entry); balance=value(balance_entry))}
      ), @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])}),
      "&8&m                                                  "
    )
  # label: String
  usageBalanceCommandSelf$: '@{MESSAGE-USAGE-BALANCE-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  usageBalanceCommandOther$: '@{MESSAGE-USAGE-BALANCE-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  # group_names: List<String>
  usageBalanceGroupCommandSelf$: |
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-USAGE-BALANCEGROUP-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}
  # label: String
  # group_names: List<String>
  usageBalanceGroupCommandOther$: |
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-USAGE-BALANCEGROUP-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}
  # holder: String
  # balance: String
  # group: String
  balanceMessageSelfThisGroup$: '@{MESSAGE-BALANCE-SELF-THIS-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # holder: String
  # balance: String
  # group: String
  balanceMessageSelfOtherGroup$: '@{MESSAGE-BALANCE-SELF-OTHER-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # holder: String
  # balance: String
  # group: String
  balanceMessageOtherThisGroup$: '@{MESSAGE-BALANCE-OTHER-THIS-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # holder: String
  # balance: String
  # group: String
  balanceMessageOtherOtherGroup$: '@{MESSAGE-BALANCE-OTHER-OTHER-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalanceCommandSelf$: '@{MESSAGE-MISSING-PERMISSION-BALANCE-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalanceCommandOther$: '@{MESSAGE-MISSING-PERMISSION-BALANCE-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  playerOnlyBalanceCommandSelf$: '@{MESSAGE-PLAYER-ONLY-BALANCE-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  playerOnlyBalanceGroupCommandSelf$: '@{MESSAGE-PLAYER-ONLY-BALANCEGROUP-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'

  playerOnlyPayCommand$: 'lut["MESSAGE_PREFIX"] & "&cOnly a player can pay to others."'
  cannotPaySelf$: 'lut["MESSAGE_PREFIX"] & "&cYou cannot pay yourself."'
  cannotPayCrossWorldGroups$: 'lut["MESSAGE_PREFIX"] & "&cYou cannot pay to another world-group than you''re currently in."'
  # label: String
  usagePayCommand$: 'lut["MESSAGE_PREFIX"] & "&cUsage: /" & label & " <player> <amount>"'
  # label: String
  # group_names: List<String>
  usagePayGroupCommand$: |
    names_string = iter_cat(group_names, (group_name) => "&e" & group_name, "&7, ", "&cNo groups found")
    lut["MESSAGE_PREFIX"] & "&cUsage: /" & label & " <player> <amount> <target-group: " & names_string & "&c> [source-group: " & names_string & "&c]"
  missingPermissionCommandPayGroupSource$: 'lut["MESSAGE_PREFIX"] & "&cNo permission to specify a custom source world-group."'
  # value: String
  valueIsNotADouble$: 'lut["MESSAGE_PREFIX"] & "&cThe value &4" & value & " &cis not a valid floating-point number."'
  # value: String
  valueIsNotStrictlyPositive$: 'lut["MESSAGE_PREFIX"] & "&cThe value &4" & value & " &cis not strictly positive."'
  # value: String
  # step_size: String
  valueIsNotAMultipleOfTransactionStepSize$: 'lut["MESSAGE_PREFIX"] & "&cThe value &4" & value & " &cis not a multiple of &4" & step_size & "&c."'
  # balance: String
  # amount: String
  # group: String
  notEnoughMoneyToPay$: 'lut["MESSAGE_PREFIX"] & "&cYour balance of &e" & balance & " &cin &e" & group & " &cdoes not suffice to pay &e" & amount & "&c."'
  # balance: String
  # amount: String
  # group: String
  # name: String
  paymentExceedsReceiversBalance$: 'lut["MESSAGE_PREFIX"] & "&cA payment of &e" & amount & " &cwould exceed &e" & name & "''s &cbalance."'
  # target_old_balance: String
  # target_new_balance: String
  # source_old_balance: String
  # source_new_balance: String
  # amount: String
  # target_group: String
  # source_group: String
  # sender_name: String
  # receiver_name: String
  paymentSentToPlayerSameGroup$: 'lut["MESSAGE_PREFIX"] & "&7You have sent &e" & amount & " &7to &e" & receiver_name & "&7; new balance&7: &e" & source_new_balance & "&7."'
  paymentSentToPlayerDifferentGroup$: 'lut["MESSAGE_PREFIX"] & "&7You have sent &e" & amount & " &7to &e" & receiver_name & " &7in &e" & target_group & "&7; new balance of &e" & source_group & "&7: &e" & source_new_balance & "&7."'
  paymentReceivedFromPlayerSameGroup$: 'lut["MESSAGE_PREFIX"] & "&7You have received &e" & amount & " &7from &e" & sender_name & "&7; new balance&7: &e" & target_new_balance & "&7."'
  paymentReceivedFromPlayerDifferentGroup$: 'lut["MESSAGE_PREFIX"] & "&7You have received &e" & amount & " &7from &e" & sender_name & " &7in &e" & source_group & "&7; new balance of &e" & target_group & "&7: &e" & target_new_balance & "&7."'
  missingPermissionPayCommand$: 'lut["MESSAGE_PREFIX"] & "&cYou have no permission to use the pay command."'

  missingPermissionMoneyCommand$: 'lut["MESSAGE_PREFIX"] & "&cYou have no permission to use the money command."'
  # input: String
  # actions: List<String>
  unknownMoneyCommandAction$: 'lut["MESSAGE_PREFIX"] & "&cThe action &4" & input & " &cis not one of &e" & iter_cat(actions, (action) => "&e" & action, "&7,") & "&c."'
  # label: String
  # actions: List<String>
  # group_names: List<String>
  usageMoneyCommand$: 'lut["MESSAGE_PREFIX"] & "&cUsage: /" & label & " <" & iter_cat(actions, (action) => "&e" & action) & "&c> <player> <value> [" & iter_cat(group_names, (group_name) => "&e" & group_name) & "&c]"'
  playerOnlyMoneyCommandNoWorldGroup$: 'lut["MESSAGE_PREFIX"] & "&cOnly players can use the money-command without specifying a world-group."'
  moneyCommandConsoleName$: '"&5Console"'
  # target_old_balance: String
  # amount: String
  # group: String
  # target_name: String
  # executor_name: String
  # balance_max: String
  # balance_min: String
  moneyAddExceedsReceiversBalance$: 'lut["MESSAGE_PREFIX"] & "&cAdding &e" & amount & " &cwould exceed &e" & target_name & "''s &cmaximum balance."'
  moneyRemoveExceedsReceiversBalance$: 'lut["MESSAGE_PREFIX"] & "&cRemoving &e" & amount & " &cwould exceed &e" & target_name & "''s &cminimum balance."'
  moneySetExceedsReceiversBalance$: 'lut["MESSAGE_PREFIX"] & "&cSetting to &e" & amount & " &cwould exceed &e" & target_name & "''s &cbalance-constraints."'
  # target_new_balance: String
  moneyCommandAddExecutor$: 'lut["MESSAGE_PREFIX"] & "&7Added &a" & amount & " &7to &e" & target_name & "''s &7account in &e" & group & "&7; new balance: &e" & target_new_balance'
  moneyCommandRemoveExecutor$: 'lut["MESSAGE_PREFIX"] & "&7Removed &c" & amount & " &7from &e" & target_name & "''s &7account in &e" & group & "&7; new balance: &e" & target_new_balance'
  moneyCommandSetExecutor$: 'lut["MESSAGE_PREFIX"] & "&7Set balance of &e" & target_name & " &7to &e" & amount & " &7in &e" & group & "&7."'
  moneyCommandAddTarget$: 'lut["MESSAGE_PREFIX"] & "&e" & executor_name & " &7has added &a" & amount & " &7to your account in &e" & group & "&7; new balance: &e" & target_new_balance'
  moneyCommandRemoveTarget$: 'lut["MESSAGE_PREFIX"] & "&e" & executor_name & " &7has removed &c" & amount & " &7from your account in &e" & group & "&7; new balance: &e" & target_new_balance'
  moneyCommandSetTarget$: 'lut["MESSAGE_PREFIX"] & "&e" & executor_name & " &7has set your balance to &e" & amount & " &7in &e" & group & "&7."'

  missingPermissionCommandBalTop$: 'lut["MESSAGE_PREFIX"] & "&cYou have no permission to use the baltop command."'
  playerOnlyBalTopCommandNoWorldGroup$: 'lut["MESSAGE_PREFIX"] & "&cOnly players can use the baltop-command without specifying a world-group."'
  missingPermissionCommandBalTopOtherGroups$: 'lut["MESSAGE_PREFIX"] & "&cYou have no permission to specify other world-groups on the baltop command."'
  # label: String
  usageBalTopCommand$: 'lut["MESSAGE_PREFIX"] & "&cUsage: /" & label'
  # label: String
  # group_names: List<String>
  usageBalTopCommandOtherGroups$: 'lut["MESSAGE_PREFIX"] & "&cUsage: /" & label & " [" & iter_cat(group_names, (group_name) => "&e" & group_name, "&7, ") & "&c]"'
  # group: String
  # entries: Map<String, String>
  balTopScreen$: |
    flatten(
      "&8&m                                                  ",
      "&7Top balances of &e" & group & "&7:",
      map(entries, (entry, index) => (
        "&8- &7#" & (index + 1) & " " & key(entry) & "&7: &e" & value(entry)
      ), "&cNo top-list entries"),
      "&8&m                                                  "
    )
  pluginReloadedSuccess$: '@{MESSAGE-PLUGIN-RELOAD(prefix=lut["MESSAGE_PREFIX"])}'
  pluginReloadedError$: '@{MESSAGE-PLUGIN-RELOAD-ERROR(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionReloadCommand$: '@{MESSAGE-MISSING-PERMISSION-RELOAD-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'

lut:
  MESSAGE_PREFIX: '@{MESSAGE-PREFIX}'
