#___       __            _______________________
#  __ |     / /_______________  /_____  /__  ____/_______________________________ ________  __
#  __ | /| / /_  __ \_  ___/_  /_  __  /__  __/  _  ___/  __ \_  __ \  __ \_  __ `__ \_  / / /
#  __ |/ |/ / / /_/ /  /   _  / / /_/ / _  /___  / /__ / /_/ /  / / / /_/ /  / / / / /  /_/ /
#  ____/|__/  \____//_/    /_/  \__,_/  /_____/  \___/ \____//_/ /_/\____//_/ /_/ /_/_\__, /
#                                                                                   /____/
#
# WorldEconomy - Developed by BlvckBytes <blvckbytes@gmail.com>
# Repository - https://github.com/BlvckBytes/WorldEconomy
# ASCII-Art - https://patorjk.com/software/taag/#p=display&f=Speed
#
# PRE-PROCESSOR-INPUT en_us.txt

commands:
  balance:
    name: balance
    aliases:
      - bal
  balanceGroup:
    name: balancegroup
    aliases:
      - balgroup
      - balg
  money:
    name: money
  pay:
    name: pay
  payGroup:
    name: paygroup
    aliases:
      - payg
  balanceTop:
    name: balancetop
    aliases:
      - baltop
  reload:
    name: worldeconomyreload
    aliases:
      - wereload
  balances:
    name: balances
    aliases:
      - bals

worldGroups:
  # Used to internally identify balances, as well as for tab-completion
  # Do not alter once initially established!
  World:
    # Rendered in chat, whenever this world-group is referred to
    displayName: '&6World'
    # List of world-names which are combined into a single economy-account per player
    members:
      - world
      - world_nether
      - world_the_end

economy:
  # Whether to log all calls made to the economy-provider for debugging-purposes
  # This property does not support live-reloading, as many plugins do not handle provider re-registers correctly
  logProviderCalls: false
  # Duration in-between writing accounts from memory to their corresponding files
  # Too little gaps will cause needless lag, too large may result in data-loss on unexpected shutdowns
  cacheWritePeriodSeconds: 30
  # How many entries to show at most when viewing top-lists
  topListSize: 5
  nameSingular: 'Euro'
  namePlural: 'Euros'
  # Balance set to an account whenever it's first created
  startingBalance: 200.0
  # Set to null for no upper bound
  maxMoney: null
  # Set to null for no lower bound
  minMoney: -1000.0
  # Whether to clamp existing accounts to the [min;max]-interval as specified above when loading them
  doClampOnLoad: true
  # Set to null for no constraint
  # Values transferred using /pay or /money need to be a multiple of this value
  transactionStepSize: .01

  # Set to null to not render
  currencyFormatPrefix: 'â‚¬ '
  # Set to null to not render
  currencyFormatSuffix: null
  currencyFormat:
    # https://en.wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags
    subtagName: 'en'
    # https://docs.oracle.com/javase/8/docs/api/index.html?java/math/RoundingMode.html
    roundingMode: FLOOR
    useGrouping: true
    minimumFractionDigits: 2
    maximumFractionDigits: 2

playerMessages:
  couldNotLoadAccountSelf$: '@{MESSAGE-COULD-NOT-LOAD-ACCOUNT-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # name: String
  couldNotLoadAccountOther$: '@{MESSAGE-COULD-NOT-LOAD-ACCOUNT-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  # current_world: String
  notInAnyWorldGroupSelf$: '@{MESSAGE-NOT-IN-ANY-WORLD-GROUP-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # name: String
  # current_world: String
  notInAnyWorldGroupOther$: '@{MESSAGE-NOT-IN-ANY-WORLD-GROUP-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  # name: String
  # group_names: List<String>
  unknownWorldGroup$: |
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-UNKNOWN-WORLD-GROUP(prefix=lut["MESSAGE_PREFIX"])}
  # value: String
  valueIsNotADouble$: '@{MESSAGE-VALUE-IS-NOT-A-DOUBLE(prefix=lut["MESSAGE_PREFIX"])}'
  # value: String
  valueIsNotStrictlyPositive$: '@{MESSAGE-VALUE-IS-NOT-STRICTLY-POSITIVE(prefix=lut["MESSAGE_PREFIX"])}'
  # value: String
  # step_size: String
  valueIsNotAMultipleOfTransactionStepSize$: '@{MESSAGE-VALUE-IS-NOT-A-MULTIPLE-OF-TRANSACTION-STEP-SIZE(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalancesCommandSelf$: '@{MESSAGE-MISSING-PERMISSION-BALANCES-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalancesCommandOther$: '@{MESSAGE-MISSING-PERMISSION-BALANCES-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  playerOnlyBalancesCommandSelf$: '@{MESSAGE-PLAYER-ONLY-BALANCES-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  usageBalancesCommandSelf$: '@{MESSAGE-USAGE-BALANCES-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  usageBalancesCommandOther$: '@{MESSAGE-USAGE-BALANCES-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  # - holder: String
  # - balances: Map<String, String>
  # The key of balances represents the display-name of the world-group, the value its corresponding formatted balance
  balancesScreen$: |
    flatten(
      @{MESSAGE-BALANCES-SCREEN-SPACER},
      @{MESSAGE-BALANCES-SCREEN-HEADLINE(prefix=lut["MESSAGE_PREFIX"])},
      map(balances, (balance_entry) => (
        @{MESSAGE-BALANCES-SCREEN-WORLD-GROUP-LINE(prefix=lut["MESSAGE_PREFIX"]; world_group=key(balance_entry); balance=value(balance_entry))}
      ), @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])}),
      @{MESSAGE-BALANCES-SCREEN-SPACER}
    )
  # label: String
  usageBalanceCommandSelf$: '@{MESSAGE-USAGE-BALANCE-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  usageBalanceCommandOther$: '@{MESSAGE-USAGE-BALANCE-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  # group_names: List<String>
  usageBalanceGroupCommandSelf$: |
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-USAGE-BALANCEGROUP-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}
  # label: String
  # group_names: List<String>
  usageBalanceGroupCommandOther$: |
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-USAGE-BALANCEGROUP-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}
  # holder: String
  # balance: String
  # group: String
  balanceMessageSelfThisGroup$: '@{MESSAGE-BALANCE-SELF-THIS-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # holder: String
  # balance: String
  # group: String
  balanceMessageSelfOtherGroup$: '@{MESSAGE-BALANCE-SELF-OTHER-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # holder: String
  # balance: String
  # group: String
  balanceMessageOtherThisGroup$: '@{MESSAGE-BALANCE-OTHER-THIS-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # holder: String
  # balance: String
  # group: String
  balanceMessageOtherOtherGroup$: '@{MESSAGE-BALANCE-OTHER-OTHER-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalanceCommandSelf$: '@{MESSAGE-MISSING-PERMISSION-BALANCE-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalanceGroupCommandSelf$: '@{MESSAGE-MISSING-PERMISSION-BALANCEGROUP-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBalanceCommandOther$: '@{MESSAGE-MISSING-PERMISSION-BALANCE-COMMAND-OTHER(prefix=lut["MESSAGE_PREFIX"])}'
  playerOnlyBalanceCommandSelf$: '@{MESSAGE-PLAYER-ONLY-BALANCE-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  playerOnlyBalanceGroupCommandSelf$: '@{MESSAGE-PLAYER-ONLY-BALANCEGROUP-COMMAND-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  playerOnlyPayCommand$: '@{MESSAGE-PLAYER-ONLY-PAY-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'
  cannotPaySelf$: '@{MESSAGE-CANNOT-PAY-SELF(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  usagePayCommand$: '@{MESSAGE-USAGE-PAY-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  # group_names: List<String>
  usagePayGroupCommand$: |
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-USAGE-PAYGROUP-COMMAND(prefix=lut["MESSAGE_PREFIX"])}
  # label: String
  # group_names: List<String>
  usagePayGroupCommandSource$: |
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-USAGE-PAYGROUP-COMMAND-SOURCE(prefix=lut["MESSAGE_PREFIX"])}
  missingPermissionCommandPayGroupSource$: '@{MESSAGE-MISSING-PERMISSION-PAYGROUP-COMMAND-SOURCE(prefix=lut["MESSAGE_PREFIX"])}'
  # balance: String
  # amount: String
  # world_group: String
  notEnoughMoneyToPayThisGroup$: '@{MESSAGE-NOT-ENOUGH-MONEY-TO-PAY-THIS-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # balance: String
  # amount: String
  # world_group: String
  notEnoughMoneyToPayOtherGroup$: '@{MESSAGE-NOT-ENOUGH-MONEY-TO-PAY-OTHER-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # balance: String
  # amount: String
  # world_group: String
  # name: String
  paymentExceedsReceiversBalanceThisGroup$: '@{MESSAGE-PAYMENT-EXCEEDS-RECEIVERS-BALANCE-THIS-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # balance: String
  # amount: String
  # world_group: String
  # name: String
  paymentExceedsReceiversBalanceOtherGroup$: '@{MESSAGE-PAYMENT-EXCEEDS-RECEIVERS-BALANCE-OTHER-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  # target_old_balance: String
  # target_new_balance: String
  # source_old_balance: String
  # source_new_balance: String
  # amount: String
  # target_group: String
  # source_group: String
  # sender_name: String
  # receiver_name: String
  payGroupSentToPlayerThisSource$: '@{MESSAGE-PAYGROUP-SENT-TO-PLAYER-THIS-SOURCE(prefix=lut["MESSAGE_PREFIX"])}'
  payGroupSentToPlayerOtherSource$: '@{MESSAGE-PAYGROUP-SENT-TO-PLAYER-OTHER-SOURCE(prefix=lut["MESSAGE_PREFIX"])}'
  paySentToPlayerThisTarget$: '@{MESSAGE-PAY-SENT-TO-PLAYER-THIS-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  paySentToPlayerOtherTarget$: '@{MESSAGE-PAY-SENT-TO-PLAYER-OTHER-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  payReceivedFromPlayerThisSourceThisTarget$: '@{MESSAGE-PAY-RECEIVED-FROM-PLAYER-THIS-SOURCE-THIS-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  payReceivedFromPlayerThisSourceOtherTarget$: '@{MESSAGE-PAY-RECEIVED-FROM-PLAYER-THIS-SOURCE-OTHER-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  payReceivedFromPlayerOtherSourceThisTarget$: '@{MESSAGE-PAY-RECEIVED-FROM-PLAYER-OTHER-SOURCE-THIS-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  payReceivedFromPlayerOtherSourceOtherTarget$: '@{MESSAGE-PAY-RECEIVED-FROM-PLAYER-OTHER-SOURCE-OTHER-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionPayCommand$: '@{MESSAGE-MISSING-PERMISSION-PAY-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionPayGroupCommand$: '@{MESSAGE-MISSING-PERMISSION-PAYGROUP-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionMoneyCommand$: '@{MESSAGE-MISSING-PERMISSION-MONEY-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'
  # input: String
  # actions: List<String>
  unknownMoneyCommandAction$: |
    action_name_list = iter_cat(actions, (action_name) => @{MESSAGE-USAGE-MONEY-ACTION-ITEM}, @{MESSAGE-USAGE-MONEY-ACTION-SEPARATOR})
    @{MESSAGE-UNKNOWN-MONEY-COMMAND-ACTION}
  # label: String
  # actions: List<String>
  # group_names: List<String>
  usageMoneyCommand$: |
    action_name_list = iter_cat(actions, (action_name) => @{MESSAGE-USAGE-MONEY-ACTION-ITEM}, @{MESSAGE-USAGE-MONEY-ACTION-SEPARATOR})
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-USAGE-MONEY-COMMAND}
  playerOnlyMoneyCommandNoWorldGroup$: '@{MESSAGE-PLAYER-ONLY-MONEY-COMMAND-NO-WORLD-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  moneyCommandConsoleName$: '@{MESSAGE-MONEY-COMMAND-CONSOLE-NAME}'
  # target_old_balance: String
  # amount: String
  # group: String
  # target_name: String
  # executor_name: String
  # balance_max: String
  # balance_min: String
  moneyAddExceedsReceiversBalance$: '@{MESSAGE-MONEY-ADD-EXCEEDS-RECEIVER-BALANCE(prefix=lut["MESSAGE_PREFIX"])}'
  moneyRemoveExceedsReceiversBalance$: '@{MESSAGE-MONEY-REMOVE-EXCEEDS-RECEIVER-BALANCE(prefix=lut["MESSAGE_PREFIX"])}'
  moneySetExceedsReceiversBalance$: '@{MESSAGE-MONEY-SET-EXCEEDS-RECEIVER-BALANCE(prefix=lut["MESSAGE_PREFIX"])}'
  # target_new_balance: String
  moneyCommandAddExecutor$: '@{MESSAGE-MONEY-ADD-EXECUTOR(prefix=lut["MESSAGE_PREFIX"])}'
  moneyCommandRemoveExecutor$: '@{MESSAGE-MONEY-REMOVE-EXECUTOR(prefix=lut["MESSAGE_PREFIX"])}'
  moneyCommandSetExecutor$: '@{MESSAGE-MONEY-SET-EXECUTOR(prefix=lut["MESSAGE_PREFIX"])}'
  moneyCommandAddTarget$: '@{MESSAGE-MONEY-ADD-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  moneyCommandRemoveTarget$: '@{MESSAGE-MONEY-REMOVE-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  moneyCommandSetTarget$: '@{MESSAGE-MONEY-SET-TARGET(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBaltopCommand$: '@{MESSAGE-MISSING-PERMISSION-BALTOP-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'
  playerOnlyBaltopCommandNoWorldGroup$: '@{MESSAGE-PLAYER-ONLY-BALTOP-COMMAND-NO-WORLD-GROUP(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionBaltopCommandOtherGroups$: '@{MESSAGE-MISSING-PERMISSION-BALTOP-COMMAND-OTHER-GROUPS(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  usageBalTopCommand$: '@{MESSAGE-USAGE-BALTOP-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'
  # label: String
  # group_names: List<String>
  usageBalTopCommandOtherGroups$: |
    world_group_list = iter_cat(group_names, (group_name) => @{MESSAGE-USAGE-WORLD-GROUP-LIST-ITEM}, @{MESSAGE-USAGE-WORLD-GROUP-LIST-SEPARATOR}, @{MESSAGE-NO-WORLD-GROUPS(prefix=lut["MESSAGE_PREFIX"])})
    @{MESSAGE-USAGE-BALTOP-COMMAND-OTHER-GROUPS(prefix=lut["MESSAGE_PREFIX"])}
  # world_group: String
  # entries: Map<String, String>
  balTopScreen$: |
    flatten(
      @{MESSAGE-BALTOP-SCREEN-SPACER},
      @{MESSAGE-BALTOP-SCREEN-HEADER},
      map(entries, (entry, index) => (
        @{MESSAGE-BALTOP-SCREEN-TOP-LINE(place=index + 1; name=key(entry); balance=value(entry))}
      ), @{MESSAGE-BALTOP-SCREEN-NO-ENTRIES}),
      @{MESSAGE-BALTOP-SCREEN-SPACER}
    )

  pluginReloadedSuccess$: '@{MESSAGE-PLUGIN-RELOAD(prefix=lut["MESSAGE_PREFIX"])}'
  pluginReloadedError$: '@{MESSAGE-PLUGIN-RELOAD-ERROR(prefix=lut["MESSAGE_PREFIX"])}'
  missingPermissionReloadCommand$: '@{MESSAGE-MISSING-PERMISSION-RELOAD-COMMAND(prefix=lut["MESSAGE_PREFIX"])}'

lut:
  MESSAGE_PREFIX: '@{MESSAGE-PREFIX}'
